#!/usr/bin/env dash

set -e

php_version="$(php -nv | grep -E -o 'PHP [0-9]+\.[0-9]+' | cut -f2 -d' ')"
build_deps=""
run_deps="tini"
os_name="$(grep -E ^ID= /etc/os-release | cut -d = -f 2)"
existing_so_files="$(find "$(php -n -r 'echo ini_get("extension_dir");')" -name '*.so' -printf '%f ')"
IFS=" "

php_version_in() {
  local test_version

  for test_version in "$@"; do
    if [ "$php_version" = "$test_version" ]; then
      return 0
    fi
  done

  return 1
}

# Install build dependencies, and keeps track of them.
build_deps_debian() {
  if [ "$os_name" = "debian" ]; then
    build_deps="$* $build_deps"
    apt-get install -y --no-install-suggests --no-install-recommends "$@"
  fi
}

build_deps_alpine() {
  if [ "$os_name" = "alpine" ]; then
    apk add --no-cache --virtual .build-deps "$@"
  fi
}

# Add run dependencies to be installed at the end of the installation.
run_deps_alpine() {
  if [ "$os_name" = "alpine" ]; then
    run_deps="$* $run_deps"
  fi
}

run_deps_debian() {
  if [ "$os_name" = "debian" ]; then
    run_deps="$* $run_deps"
  fi
}

# Print the banner announcing that we're building an extension.
announce() {
  printf "%$((${#1} + 12))s\n" "" | sed 's/ /#/g'
  printf "###   %${#1}s   ###\n" " "
  echo   "###   ${1}   ###"
  printf "###   %${#1}s   ###\n" " "
  printf "%$((${#1} + 12))s\n" "" | sed 's/ /#/g'
}

string_in_list() {
  local string_in_string_item

  for string_in_string_item in $2; do
    if [ "$1" = "$string_in_string_item" ]; then
      return 0
    fi
  done

  return 1
}

# Download the given extension.
download() {
  local ext_name="$1"
  local ext_version="$2"
  local url="https://pecl.php.net/get/${ext_name}-${ext_version}.tgz"

  if [ "$ext_name" = "newrelic" ]; then
    url="https://download.newrelic.com/php_agent/archive/${ext_version}/newrelic-php5-${ext_version}-linux$(if [ "$os_name" = "alpine" ]; then echo "-musl"; fi).tar.gz"
  fi

  rm -rf "/usr/src/php/ext/$ext_name"
  mkdir -p "/usr/src/php/ext/$ext_name"
  printf "downloading %s@%s -> /usr/src/php/ext/%s... " "$ext_name" "$ext_version" "$ext_name"
  wget -q -O- "$url" | tar -xz --strip-components 1 -C "/usr/src/php/ext/$ext_name"
  echo "done"
}

case "$os_name" in
  alpine)
    buildRequiredPackageLists_libssldev="libretls-dev"
    buildRequiredPackageLists_libssl="libssl1.0"

    apk add --no-cache $PHPIZE_DEPS
    ;;

  debian)
    buildRequiredPackageLists_libssldev="^libssl([0-9]+(\.[0-9]+)*)?-dev$"

    apt-get install -y --no-install-recommends --no-install-suggests $PHPIZE_DEPS wget
    ;;

  *)
    echo "Unknown OS [$os_name]."
    exit 1
    ;;
esac

# Extract the PHP source.
docker-php-source extract

# configure dependencies
for ext in "$@"; do
  ext_name="$(echo "$ext" | cut -f1 -d-)"
  ext_version="$(echo "$ext" | awk -F- '{ $1=""; sub(" ", ""); print; }')"
  skip_install_step=

  if [ "$ext_version" = "" ]; then
    announce "installing bundled extension: $ext_name"
  else
    announce "installing extension from pecl: $ext_name@$ext_version"
    download "$ext_name" "$ext_version"
  fi

  case "$ext_name" in
    amqp)
      build_deps_alpine rabbitmq-c-dev
      build_deps_debian librabbitmq-dev libssh-dev

      run_deps_alpine rabbitmq-c
      run_deps_debian "^librabbitmq[0-9]*$"
      ;;

    bz2)
      build_deps_alpine bzip2-dev
      build_deps_debian libbz2-dev

      run_deps_alpine libbz2
      ;;

    gd)
      build_deps_alpine freetype-dev libjpeg-turbo-dev libpng-dev libxpm-dev libwebp-dev
      build_deps_debian libfreetype6-dev libjpeg62-turbo-dev libpng-dev libxpm-dev libwebp-dev

      run_deps_alpine freetype libjpeg-turbo libpng libxpm libwebp
      run_deps_debian libfreetype6 libjpeg62-turbo "^libpng[0-9]+-[0-9]+$" libxpm4 "^libwebp[0-9]+$"

      if php_version_in 7.3; then
        docker-php-ext-configure gd --with-gd --with-jpeg-dir --with-png-dir --with-zlib-dir --with-xpm-dir --with-freetype-dir --with-webp-dir
      else
        docker-php-ext-configure gd --enable-gd --with-webp --with-jpeg --with-xpm --with-freetype
      fi
      ;;

    gettext)
      build_deps_alpine gettext-dev
      run_deps_alpine gettext
      ;;

    gmp)
      build_deps_alpine gmp-dev
      build_deps_debian libgmp-dev

      run_deps_alpine gmp
      ;;

    grpc)
      build_deps_alpine zlib-dev linux-headers
      build_deps_debian zlib1g-dev

      run_deps_alpine libstdc++
      ;;

    imagick)
      build_deps_alpine imagemagick-dev
      build_deps_debian libmagickwand-dev

      run_deps_alpine imagemagick libgomp
      run_deps_debian "^libmagickwand-6.q16-[0-9]+$" "^libmagickcore-6.q16-[0-9]+-extra$"
      ;;

    imap)
      build_deps_alpine krb5-dev imap-dev "$buildRequiredPackageLists_libssldev"
      build_deps_debian libkrb5-dev libc-client-dev "$buildRequiredPackageLists_libssldev"

      run_deps_alpine c-client "$buildRequiredPackageLists_libssl"
      run_deps_debian libc-client2007e "$buildRequiredPackageLists_libssl"

      docker-php-ext-configure imap --with-kerberos --with-imap-ssl
      ;;

    intl)
      build_deps_alpine icu-dev
      build_deps_debian libicu-dev

      run_deps_alpine icu-libs
      run_deps_debian "^libicu[0-9]+$"
      ;;

    memcached)
      build_deps_alpine libmemcached-dev zlib-dev
      build_deps_debian libmemcached-dev zlib1g-dev

      run_deps_alpine libmemcached-libs
      run_deps_debian libmemcachedutil2
      ;;

    newrelic)
      mkdir -p /opt/newrelic
      find /usr/src/php/ext/newrelic/agent/x64 -type f ! -name "newrelic-$(php -ni | grep -F 'PHP Extension =' | sed -e 's/PHP Extension => //').so" -delete
      mv "$(find /usr/src/php/ext/newrelic/agent/x64 -iname '*.so' | head -n 1)" "$(php -n -r 'echo ini_get("extension_dir");')/newrelic.so"
      mv /usr/src/php/ext/newrelic/daemon/newrelic-daemon.x64 /opt/newrelic/daemon.x64
      skip_install_step=1
      ;;

    redis)
      build_deps_alpine zstd-dev
      build_deps_debian libzstd-dev

      run_deps_alpine zstd-libs
      run_deps_debian "^libzstd[0-9]*$"
      ;;

    soap)
      build_deps_alpine libxml2-dev
      build_deps_debian libxml2-dev
      ;;

    yaml)
      build_deps_alpine yaml-dev
      build_deps_debian libyaml-dev

      run_deps_alpine yaml
      run_deps_debian libyaml-0-2
      ;;

    zip)
      build_deps_alpine cmake gnutls-dev libzip-dev "$buildRequiredPackageLists_libssldev" zlib-dev
      build_deps_debian cmake gnutls-dev "$buildRequiredPackageLists_libssldev" libzip-dev libbz2-dev zlib1g-dev libmbedtls-dev

      run_deps_alpine libzip
      run_deps_debian "^libzip[0-9]$" "^libmbedtls[0-9]*$"

      if php_version_in 7.3; then
        docker-php-ext-configure zip --with-libzip
      else
        docker-php-ext-configure zip --with-zip
      fi
      ;;
  esac

  # If we're not skipping the install step, then install the extension.
  if [ -z $skip_install_step ]; then
    docker-php-ext-install -j2 "$ext_name"
  fi

  # If the extension's so file didn't exist prior to running this installation script, then we can strip it to reduce
  # the size.
  if ! string_in_list "$ext_name.so" "$existing_so_files"; then
    strip --strip-all "$(php -n -r 'echo ini_get("extension_dir");')/${ext_name}.so"
  fi
done

# remove php source
docker-php-source delete

# remove temporary files
rm -rf /tmp/pear*

# finalize installed packages
case "$os_name" in
  alpine)
    apk del --no-cache $build_deps
    apk del --no-cache $PHPIZE_DEPS
    apk add --no-cache $run_deps
    ;;

  debian)
    apt-get purge -y $build_deps
    apt-get purge -y $PHPIZE_DEPS wget
    apt-get autoremove -y
    apt-get install -y $run_deps
    apt-get clean
    rm -rf /var/cache/debconf /var/log/dpkg.log /var/log/apt
    ;;
esac